parameter
  (or :_entries (int %_Liq_entry_change_storage_amount) (nat %_Liq_entry_purchase));
storage int;
code { DUP ;
       DIP { CDR @storage_slash_1 } ;
       CAR @parameter_slash_2 ;
       LAMBDA @check_sender
         address
         (pair (lambda (pair string address) unit) address)
         { RENAME @req_slash_3 ;
           LAMBDA
             (pair string address)
             unit
             { RENAME @error_string__req_slash_4 ;
               DUP ;
               CDR @req_slash_3 ;
               SENDER ;
               COMPARE ;
               NEQ ;
               IF { DUP ; CAR @error_string_slash_5 ; FAILWITH } { UNIT } ;
               DIP { DROP } } ;
           PAIR } ;
       DUUP @parameter ;
       IF_LEFT
         { RENAME @change_slash_7 ;
           DUP @change ;
           DUUUUUP @storage ;
           ADD @storage ;
           PUSH int 0 ;
           DUUP @storage ;
           COMPARE ;
           LT ;
           IF { PUSH string "invalid" ; FAILWITH } { UNIT } ;
           DROP ;
           DIP { DROP } ;
           NIL operation ;
           PAIR }
         { RENAME @amount_to_purchase_slash_10 ;
           AMOUNT @funds ;
           PUSH mutez 3000000 ;
           DUUUP @amount_to_purchase ;
           MUL ;
           COMPARE ;
           LT ;
           IF { PUSH string "Insufficient funds" ; FAILWITH } { UNIT } ;
           DROP ;
           PUSH key_hash "tz1fvJjM1YSaK3EQ35EJb3NPpUfXSpjSEaGr" ;
           IMPLICIT_ACCOUNT ;
           PUSH nat 100 ;
           PUSH nat 3 ;
           AMOUNT ;
           MUL ;
           EDIV ;
           IF_NONE { PUSH string "division by 0 impossible" ; FAILWITH } { CAR @a } ;
           RENAME @payout ;
           UNIT ;
           TRANSFER_TOKENS @op ;
           SWAP ;
           DUUUUUP ;
           SUB @storage ;
           NIL operation ;
           DUUUP ;
           DIIIP { DROP } ;
           CONS ;
           PAIR } ;
       DIP { DROP ; DROP ; DROP } };
